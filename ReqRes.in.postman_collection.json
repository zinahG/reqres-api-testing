{
	"info": {
		"_postman_id": "22efd768-9567-40ed-8a49-82f7fd2658b7",
		"name": "ReqRes.in",
		"description": "practising API testing with reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46405530",
		"_collection_link": "https://z-385349.postman.co/workspace/a6cd8551-5be6-4bc1-88c5-c7ae756197a9/collection/46405530-22efd768-9567-40ed-8a49-82f7fd2658b7?action=share&source=collection_link&creator=46405530"
	},
	"item": [
		{
			"name": "Passed",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var dataArray = jsonData.data;",
									"let mayaExs = false;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"correct page number\", function () {",
									"//     pm.expect(jsonData.page).to.eql(2);",
									"// });",
									"",
									"// pm.test(\"correct entries per page\", function () {",
									"//     pm.expect(jsonData.per_page).to.eql(6);",
									"// });",
									"",
									"pm.test(\"correct JSON data\", function () {",
									"    pm.expect(jsonData.page).to.eql(2);",
									"    pm.expect(jsonData.per_page).to.eql(6);",
									"    // pm.expect(jsonData.total).to.eql(12);",
									"    // pm.expect(jsonData.total_pages).to.eql(2)",
									" });",
									"",
									"pm.test(\"if a users fname is Michael\", function () {",
									" for ( let i=0; i<dataArray.length ; i++){",
									"    if (dataArray[i].first_name == 'Michael'){",
									"        mayaExs = true;",
									"        break;",
									"    }",
									"pm.expect(mayaExs).to.be.true;",
									" };",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/users?page=2",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "list a single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json().data; // Accessing the 'data' object directly",
									"const userID = pm.environment.get(\"userID\"); // Getting the userID from environment variables",
									"",
									"pm.test(\"correct user fetched\", function () {",
									"    pm.expect(responseData.id).to.eql(userID);",
									"});",
									"",
									"pm.test(\"Response body matches the expected schema\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar'); // Updated keys",
									"",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    pm.expect(responseData.first_name).to.be.a('string').and.to.have.lengthOf.at.least(1); // Updated field",
									"    pm.expect(responseData.last_name).to.be.a('string').and.to.have.lengthOf.at.least(1); // Updated field",
									"    pm.expect(responseData.avatar).to.be.a('string').and.to.match(/^https?:\\/\\/.+/); // Added check for avatar URL",
									"});",
									"",
									"pm.test(\"User ID matches requested resource\", function () {",
									"    pm.expect(responseData.id).to.exist.and.to.equal(userID);",
									"});",
									"",
									"pm.test(\"First name field must be a non-empty string\", function () { // Updated test case name",
									"    pm.expect(responseData.first_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
									"});",
									"",
									"pm.test(\"Email field is in a valid format\", function () {    ",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomValue = Math.floor(Math.random() * 12) + 1;",
									"pm.environment.set(\"userID\", randomValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/users/{{userID}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "single user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response data is empty\", function (){",
									"    pm.expect(pm.response.json()).to.be.empty;",
									"}",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/users/23",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var dataArray = jsonData.data;",
									"let colorExs = false;",
									"let resourceName = jsonData.data[1].name;",
									"",
									"pm.environment.set(\"resourceName\", resourceName);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"correct JSON data\", function () {",
									"    pm.expect(jsonData.page).to.eql(1);",
									"    pm.expect(jsonData.per_page).to.eql(6);",
									"    pm.expect(jsonData.total).to.eql(12);",
									"    pm.expect(jsonData.total_pages).to.eql(2)",
									"    pm.expect(jsonData.data[0].id).to.eql(1)",
									" });",
									"",
									"pm.test(\"if a a color ++ exists within the system\", function () {",
									" for ( let i=0; i<dataArray.length ; i++){",
									"    if (dataArray[i].name == \"fuchsia rose\"){",
									"        colorExs = true;",
									"        break;",
									"    }",
									" }",
									"pm.expect(colorExs).to.be.true;",
									"",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/unknown",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "List a Single Resource ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let resourceName = pm.environment.get(\"resourceName\"); // Accessing environment variable ",
									"pm.test(\"Resource name is 'rose'\", function () {",
									"    var jsonData= pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(resourceName);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/unknown/2",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"unknown",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Resource not found ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response data is empty\", function (){",
									"    pm.expect(pm.response.json()).to.be.empty;",
									"}",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/unknown/23",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"unknown",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "delayed response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/api/users?delay=3",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Failed",
			"item": [
				{
					"name": "Create a user (as an admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//wrong response data, cam't be tested "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n            \"first_name\": \"john\",\n            \"last_name\": \"doe\",\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/users",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//wrong response data, can't be tested "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/users/2",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user (patch)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//wrong response data, can't be tested "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/users/2",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"//wrong response data, can't be tested "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/users/2",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "user sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/register",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "register user unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\"\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/register",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/login",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "reqres-free-v1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"error\": \"Missing password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/api/login",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// pm.test(\"Response time is less than 200ms\", function () {",
					"//     pm.expect(pm.response.responseTime).to.be.below(200);",
					"// });",
					"",
					"",
					"pm.test(\"Response time is less than 200ms\", function () {",
					"    const currentRequestName = pm.info.requestName;",
					"",
					"if (currentRequestName == \"delayed response\"){",
					"    console.log( \"skipping time is less than 200ms request\")",
					"    return;",
					"}",
					"",
					"    pm.expect(pm.response.responseTime).to.be.below(200);",
					"});"
				]
			}
		}
	]
}